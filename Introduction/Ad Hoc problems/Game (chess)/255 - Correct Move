/* This problem requires user to find whether a chess move is valid. Read the rules from the problem description. I have made functions
   for all the stages as you can see below */

#include <stdio.h>
int king,queen,move;


/* Checks if it is a legal state. This is simple because only illegal  state is when both king and queen are in same position. */
int legal_state(){
	if(king==queen)return 0;
	else return 1;
}


/* Checks if the move is legal. This is bit tedious. */
int legal_move(){

	if(move==queen || move==king)return 0;
  
  /* keep the info about queen's cell */
	int row=queen/8;
	int col=queen%8;
	
	/* then check if it is possible to move to required cell without passing through king, move up, down, right, left */
	int c_row=row,c_col=col;
	while(c_col<8){
		if((c_row*8+c_col)==king)break;
		if(move==(c_row*8+c_col))return 1;
		c_col++;
	}
	c_col=col;
	while(c_col>=0){
		if((c_row*8+c_col)==king)break;
		if(move==(c_row*8+c_col))return 1;
		c_col--;
	}
	c_row=row,c_col=col;
	while(c_row<8){
		if((c_row*8+c_col)==king)break;
		if(move==(c_row*8+c_col))return 1;
		c_row++;
	}
	c_row=row;
	
	while(c_row>=0){
		if((c_row*8+c_col)==king)break;
		if(move==(c_row*8+c_col))return 1;
		c_row--;
	}
	return 0;
	
}


/* see the rules for allowed move in problem description, check all the cells adjacent to king's position */
int move_allowed(){
	int row=king/8,col=king%8;
	if(row==0){
		if(col==0){
			if(move==8 || move==1)return 0;
		}
		
		else if(col==7){
			if(move==6 || move==15)return 0;
		}
		else {
			if(move==(col+1) || move==(col-1) || move==(col+8))return 0;
		}
		
	}
	else if(row==7){
		if(col==0){
			if(move==48 || move==57)return 0;
		}
		else if(col==7){
			if(move==62 || move==55)return 0;
		}
		else {
			if(move==(row*8+col+1) || move==(row*8+col-1) || move==(row*8+col-8))return 0;
		}
		
	}
	else if(col==0){
		if(move==(row*8+8) || move==(row*8-8) || move==(row*8+1))return 0;
		
	}
	else if(col==7){
		if(move==(row*8+col+8) || move==(row*8+col-8) || move==(row*8+col-1))return 0;
		
	}
	else{
		if(move==(row*8+col+1) || move==(row*8+col-1) || move==(row*8+col+8) || move==(row*8+col-8))return 0;

	}
	return 1;
}


/* finally check if king can make a move after queen's move, queen blocks king only at corners */
int king_can_move(){
	if(move==9 && king==0)return 0;
	if(move==14 && king==7)return 0;
	if(move==49 && king==56)return 0;
	if(move==54 && king==63)return 0;
	else return 1;
}
int main(void) {
	
	
	while(scanf("%d %d %d",&king, &queen,&move)==3){
		if(legal_state()){
			if(legal_move()){
				if(move_allowed()){
					if(king_can_move())printf("Continue");
					else printf("Stop");
				}
				else printf("Move not allowed");
				
			}
			else printf("Illegal move");
		}
		else printf("Illegal state");
		
		printf("\n");
	}
	return 0;
}
